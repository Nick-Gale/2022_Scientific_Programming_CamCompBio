---
title: "Scientific Programming in Julia"
subtitle: "Statistics, Functional Programming, and Performance Computing"
author: "Nicholas Gale and Stephen Eglen"
engine: jupyter
execute:
  echo: true
format:
  beamer:
    keep-tex: true
    monofont: "JuliaMono"
    header-includes: |
      \makeatletter
      \setbeamertemplate{footline}
      {
      \tikz[overlay]{\node at(12,.25){\thepage};}
      }
      \makeatother
---

## DataFrames

* Dataframes are tabular data with named columns.

* They are supported using the `DataFrames` package.

* The names are given in symbols (`:xyz` which is a name, differing
  from the variable `xyz`).


## Creating DataFrames


* To initalise a data frame use the `dataframe(colname1=data1, colname2=data2)`

* No recycling -- columns must have matching lengths.

* An empty data frame is made from  empty typed-vectors.

:::: {.columns}

::: {.column width="50%"}
```{julia}
using DataFrames
println(DataFrame(x=[0.5, 6, 7],
                   y=[3, 5, 9]))

```
:::

::: {.column width="50%"}
```{julia}
println(
DataFrame(x=Float64[],
          st=String[]))
```
:::

::::

## Accessing DataFrames

* Data indexed as a matrix, by rows, cols and symbols.

* Entire rows can be indexed as normal with `:` or by `!`.

:::: {.columns}

::: {.column width="50%"}
```{julia}
df = DataFrame(A=[5, 6, 7],
               B='a':'c',
               C=["cat", "dog", "eel"])
println(df)
```

:::

::: {.column width="50%"}
```{julia}
println(df[!, :A])
println(df[2,3])
println(df[:, [:C, :A]])
```
:::

::::


## Modifying DataFrames

* The `push!` function is used to add more rows. The function accepts an ordered tuple.

* `promote=true` needed if symbol's datatype does not match the data.


```{julia}
df = DataFrame(S=String[], N=Float64[])
push!(df, ("A string", 4.4))
# println(push!(df, ('C', 4.4))) # WRONG - C is char
println(push!(df, ('C', 4.4), promote=true))
```

## CSV Piping

* A common usecase for datascience is importing CSV data.

* The `DataFrame` function can be wrapped around a CSV file; or the
  file piped with `|>`. (`| >`)

* A DataFrame may be written to CSV using `CSV.write`.


```{julia}
using CSV
df1 = DataFrame(CSV.File("example.csv"))
df2 = CSV.File("example.csv") |> DataFrame
df1 == df2
```


## Random Number Generation

* The default random function is `rand(...)` and is highly extensible.

* `rand(distribution, n)` takes n samples from a distribution.

* The default distribution is $U([0,1])$ and default sample number is one. Distributions can be specified as a set.


```{julia}
using Random
rn = round( rand(), digits=6)
rsamp = round.( rand(3); digits=4)
rsampcustom = rand([1,4,"A"], 5)
display([rn, rsamp, rsampcustom])
```

## Seeding and Permutation

* A seed is specified with: `Random.seed!(seed_number)`.

* A random permutation is given by the `randperm` function.


```{julia}
using Random
Random.seed!(1)
println(randperm(5))
Random.seed!(1)
println(randperm(5))
```

## Statistics

* Julia has first class support for statistics.

* The `StatsBase` package has the standard statistics functions:
  `mean, var, std, mode, zscore, quantile` et c.

* Weighted statistics are computed with an optional weights vectors;
  in R they are their own methods.


```{julia}
using StatsBase
x = [20, 0, 2, 4, 4]
w = Weights([1, 5, 5, 5, 5])
@show mean(x)
@show mean(x, w)
@show median(x);
```

## Distributions

* Julia supports distributions through Distributions package.

* Distribution fitting is provided through ``fit(DistributionType,
  data)``; the result of which can then be sampled from.


```{julia}
using Distributions
data = 4*randn(1000) .+ 12
d = fit(Normal, data)
println(d)
rand(d, 4)  # draw 4 samples
```

## Sampling

* `sample` can be used as alternative to `rand`.

* `sample` needs a distribution (can be a categorical vector). Can be weighted.

* An optional keyword `replace=false` (default: true) can specify sampling without replacement.


```{julia}
using StatsBase
catdist = [1,4,5,10]
@show sample(catdist, 7)
@show sample(catdist, 3, replace=false);
# println(sample(catdist, 7, replace=false))  # WRONG!
```

 
## Interlude -- special values

* `missing` is like `NA` in R:
  <https://docs.julialang.org/en/v1/manual/missing/>
  
  
* `Inf` and `-Inf` available.

* `NaN` is available as part of IEEE standard, e.g. `var([1])`

<!-- https://github.com/JuliaLang/julia/blob/master/base/mathconstants.jl -->

* Constants like `π` and `ℯ` available.

```{julia}
@show ℯ^(im)π ≈ -1
@show 1//10 + 2//10 == 3//10;
```

## Statistics Ecosystem

* The statistics ecosytem is large and well-supported.  R is still
  number 1 for statistics though.

* Useful packages: ``StatsBase, Statistics, Distributions, DataFrames, HypothesisTests``.

* Useful resource: <https://juliastats.org/>

## Functional Programming

* Functional programming is a style where functions and data are cleanly separated.

* Object oriented programming is where data and functions/methods are attached to objects.

* Julia lends itself towards functional programming.

## Map
* `map()` takes a function and applies it to an iterable: vector, range, etc.

* The function can be a function name, or an anonymous function.

* Multiple iterables can be passed for functions of multiple variables.

---


```{julia}
v = [0, π/6, π/4]
sin1 = map(sin, v)
autod_cos = map(x -> (cos(x), -sin(x)), v)
mask = [0 1 0]
bad_sin = map((x,y)->(y==1 ? sin(x) : missing), v, mask)
display(autod_cos)
println(bad_sin)
```


## Filter
* `filter` evaluates a logical condition over an iterable.

* `filter!` is an in-place operation; `filter` creates a new copy.



```{julia}
a = collect(1:10)
@show a

b = filter(iseven, a)
@show b

filter!(isodd, a)
@show a;
```


## Sum

* The `sum` function supports functions as the first argument; these are applied before summing.

* The dimension/s which the sum is performed along is given by the `dims=(dim1,...)` keyword. Default is all.

---


```{julia}
m = hcat(collect(1:4), collect(5:8))
display(m)
sum(x -> x^2, m, dims=2)
```

## Reduce

* The `reduce` function behaves exactly the same way as in R.

* Can support a generic binary operation that can be distributed over an iterable.

```{julia}
v = [7, 9, 4, 8]
println( reduce( (x,y) -> x < y ? x : y, v))
println( reduce( (x,y) -> x < y ? x : y, v, init=2))
```


## Mapreduce

* Common paradigm: `map` function f onto items, and then `reduce`
  items using binary operator.
* Saves on memory allocation compared to do both operations.

```{julia}
a = reshape(collect(1:12), (3,4))
display(a)
println( mapreduce(isodd, +, a, dims=1) )
println( mapreduce(isodd, +, a, dims=2) )
println( mapreduce(isodd, +, a) )
```

## Dimensions...

* Warning: R and Julia have switched the numerical code for rows and
  columns.  (Julia is probably more consistent).

:::: {.columns}

::: {.column width="50%"}
```{julia}
A = [1 2 3; 4 5 6]
display(A)
@show sum(A, dims=1)
@show sum(A, dims=2);
```
:::

::: {.column width="50%"}
```{julia}
using RCall
@rput A
@R_str("apply(A, 1, sum)")
```
:::


::::


<!-- https://www.juliafordatascience.com/calling-r-from-julia -->


## eachrow() and eachcol()

* Julia's version of `apply(A, fn, dim)` is to use `eachrow` and
  `eachcol`.
  
```{julia}
A = reshape(collect(1:6), (2,3))
@show A
@show map(sum, eachrow(A))
@show map(sum, eachcol(A))
```

## (Advanced) Efficiency notes...
* Note that `sum.(eachrow(A))` is equivalent, but
  intermediate array is needed, taking more memory.

[Details](https://discourse.julialang.org/t/generic-way-to-apply-function-to-a-dimension-of-a-matrix/54378/5)

```{julia}
B = rand(1_000,1_000);
@time map(sum, eachrow(B));
@time map(sum, eachrow(B));

@time sum.(eachrow(B));
@time sum.(eachrow(B));
```
## Inner and Outer product

* Inner product calculated with `dot(x, y)` or `x ⋅ y` 

* Unlike R's `outer()`, Julia has no *specific* method; but
  broadcasting a column vector to a row vector creates a matrix.

```{julia}
using LinearAlgebra
v = [1, 4, 2]
@show v⋅v
f(x, y) = x+y
@show f(v, v)
f.(v, v')
```



## Summary

1. Data frames

2. Random number generators

3. Statistics

4. Functional programming



## Bonus: RCall

* Julia has a package called **RCall** that provides easy access to R,
  just press "$" at the REPL.
  
* Or you can use macros to pass objects to R, and get them from R, and
  run calculations in R.

* Likewise, R has a package called **JuliaCall** to embed Julia in R.

* Similar bridges operate to python.  It's good to talk.
